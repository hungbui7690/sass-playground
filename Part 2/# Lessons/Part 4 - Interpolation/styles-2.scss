/*
  - Interpolation can be used in SassScript to inject SassScript into unquoted strings. This is particularly useful when dynamically generating names (for example for animations), or when using slash-separated values. Note that interpolation in SassScript always returns an unquoted string.

*/

@mixin inline-animation($duration) {
  $name: inline-#{unique-id()};

  @keyframes #{$name} {
    @content;
  }

  animation-name: $name;
  animation-duration: $duration;
  animation-iteration-count: infinite;
}

.pulse {
  @include inline-animation(2s) {
    from {
      background-color: yellow;
    }
    to {
      background-color: red;
    }
  }
}

/*
  üí° Fun fact:
  - Interpolation is useful for injecting values into strings, but other than that it‚Äôs rarely necessary in SassScript expressions. You definitely don‚Äôt need it to just use a variable in a property value. Instead of writing color: #{$accent}, you can just write color: $accent!

  ‚ö†Ô∏è Heads up!
  - It‚Äôs almost always a bad idea to use interpolation with numbers. Interpolation returns unquoted strings that can‚Äôt be used for any further math, and it avoids Sass‚Äôs built-in safeguards to ensure that units are used correctly.
  - Sass has powerful unit arithmetic that you can use instead. For example, instead of writing #{$width}px, write $width * 1px‚Äîor better yet, declare the $width variable in terms of px to begin with. That way if $width already has units, you‚Äôll get a nice error message instead of compiling bogus CSS.

*/
